import tkinter
from tkinter import *

#from matplotlib.backends.backend_tkagg import *

import matplotlib.pyplot as plt

from matplotlib.backends.backend_tkagg import ( FigureCanvasTkAgg)
#from matplotlib.backends.backend_tkagg import(NavigationToolbar2Tk)
#(  FigureCanvasTkAgg, NavigationToolbar2Tk)
# Implement the default Matplotlib key bindings.
from matplotlib.backend_bases import key_press_handler

from matplotlib.figure import Figure

import numpy as np
# The code for changing pages was derived from: http://stackoverflow.com/questions/7546050/switch-between-two-frames-in-tkinter
# License: http://creativecommons.org/licenses/by-sa/3.0/    



import matplotlib 
matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
from matplotlib.figure import Figure

import tkinter as tk
from tkinter import ttk
import Gaussian

LARGE_FONT= ("Verdana", 12)

 
class SeaofBTCapp(tk.Tk):

    def __init__(self, *args, **kwargs):
        
        tk.Tk.__init__(self, *args, **kwargs)

        #tk.Tk.iconbitmap(self, default="clienticon.ico")
        tk.Tk.wm_title(self, "Sea of BTC client")
        
        
        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand = True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}

        for F in (StartPage, PageOne, PageTwo, GraphPage):

            frame = F(container, self)

            self.frames[F] = frame

            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame(StartPage)

    def show_frame(self, cont):

        frame = self.frames[cont]
        frame.tkraise()

        
class StartPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self,parent)
        label = tk.Label(self, text="Start Page", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        button = ttk.Button(self, text="Visit Page 1",
                            command=lambda: controller.show_frame(PageOne))
        button.pack()

        button2 = ttk.Button(self, text="Visit Page 2",
                            command=lambda: controller.show_frame(PageTwo))
        button2.pack()

        button3 = ttk.Button(self, text="Graph Page",
                            command=lambda: controller.show_frame(GraphPage))
        button3.pack()


class PageOne(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Page One!!!", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        button1 = ttk.Button(self, text="Back to Home",
                            command=lambda: controller.show_frame(StartPage))
        button1.pack()

        button2 = ttk.Button(self, text="Page Two",
                            command=lambda: controller.show_frame(PageTwo))
        button2.pack()


class PageTwo(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Page Two!!!", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        button1 = ttk.Button(self, text="Back to Home",
                            command=lambda: controller.show_frame(StartPage))
        button1.pack()

        button2 = ttk.Button(self, text="Page One",
                            command=lambda: controller.show_frame(PageOne))
        button2.pack()


class GraphPage(tk.Frame):


    def calculateAndShowStatistics(self, pot):
        if  len(pot)  == 0:
            self.mean = "Unknown"
            self.variance = "Unknown"
        else:
            self.mean, self.variance = self.calculateStatistics(pot)
        self.meanLabel.set(str(self.mean))
        
        

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="Graph Page!", font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        self.sigma = 0.1
        self.nscatt = 1000
        self.vmax = 0.15
        
        button1 = ttk.Button(self, text="Back to Home",
                            command=lambda: controller.show_frame(StartPage))
        button1.pack()
       
        button2 = ttk.Button(self,text="Change Image",command = lambda: self.potentialData(self.sigma, self.nscatt, self.vmax, x, y))
        button2.pack()
        plt.ion()
        x = np.linspace(0,1,101)
        y = np.linspace(0,1,101)
        (x,y) = np.meshgrid(x,y)
        pot =self.potentialData(0.1,1000,0.15,x,y)
        self.figure = Figure(figsize=(5,5), dpi=100)
        
        self.plot_a = self.figure.add_subplot(111)
        self.plot_a.contour(x,y,pot)
        #self.plot_a.plot([1,2,3,4,5,6,7,8],[5,6,1,3,8,9,3,5])
       
        
        self.canvas = FigureCanvasTkAgg(self.figure, self)
        self.canvas.show()
        self.canvas.get_tk_widget().pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)

        toolbar = NavigationToolbar2TkAgg(self.canvas, self)
        toolbar.update()
        self.canvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        
        self.varLabel = tk.Label(self, text="Variance = " )
        self.meanLabel = tk.Label(self, text="Mean = " )
        self.varLabel.pack()
        self.meanLabel.pack()
        self.calculateAndShowStatistics(pot)
        
    def changeImage(self,n_image):
       
        print("Chanegimage")
        self.plot_a.plot([1,2,3,4,5,6,7,8],[5,6,1,3,8,9,-3,10])
        self.canvas.draw()
        self.canvas.flush_events()
        
        
    def potentialData(self, sigma,nscatt,vmax,x,y):
        data = Gaussian.generateRandomPotential(nscatt,vmax,sigma)
        pot = data[2]
        (mean,variance) =self.calculateStatistics(pot)
        self.varLabel = tk.Label(self,text="Variance = " + str(variance))
        potSize = len(pot)
        
            #print (potSize)
        pot = np.reshape(pot,(potSize,potSize))
        return (pot)
    
    def calculateStatistics(self,pot):
        variance = np.var(pot)
        mean = np.mean(pot)
        return (mean,variance)

app = SeaofBTCapp()
app.mainloop()
        
